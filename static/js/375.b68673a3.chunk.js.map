{"version":3,"file":"static/js/375.b68673a3.chunk.js","mappings":"kSAOaA,GALUC,EAAAA,GAAAA,IAAH,kEAKKA,EAAAA,GAAAA,IAAH,+KAQTC,EAAcD,EAAAA,GAAAA,IAAH,gEAKXE,EAAUF,EAAAA,GAAAA,IAAH,8IAMPG,EAAeH,EAAAA,GAAAA,OAAH,qD,SCuEzB,EA/EqB,WAAO,IAAD,EACzB,GAAsCI,EAAAA,EAAAA,UAAS,CAAC,GAAhD,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,oGAEfN,GAAW,GAFI,UAIOO,EAAAA,EAAAA,IAAgBJ,GAJvB,OAITK,EAJS,OAKfV,EAAeU,GALA,gDAOfN,EAAS,EAAD,IAPO,yBASfF,GAAW,GATI,4EAAH,qDAahBM,GACD,GAAE,CAACH,IAEJ,IAAMM,GAAWC,EAAAA,EAAAA,MAEXC,EAAI,WADOC,EAAAA,EAAAA,MACKC,aAAZ,aAAG,EAAgBF,KAGrBG,EAAuDjB,EAAvDiB,YAAaC,EAA0ClB,EAA1CkB,MAAOC,EAAmCnB,EAAnCmB,SAAUC,EAAyBpB,EAAzBoB,OAAQC,EAAiBrB,EAAjBqB,aAExCC,EAAU,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAQG,KAAI,SAAAC,GAAI,OAAIA,EAAKC,IAAT,IAAeC,KAAK,KAEvD,OACE,iCACE,SAAC5B,EAAD,CAAc6B,QARH,kBAAMf,EAASE,EAAf,EAQX,qBACCZ,IAAW,sCAEXE,GACC,kDAEA,iCACE,UAACV,EAAD,WACGuB,IACC,SAACrB,EAAD,CACEgC,IAAG,yCAAoCX,MAG3C,4BACE,wBAAKC,KACL,wCAAgBW,KAAKC,MAAqB,GAAfT,GAA3B,QACA,sCACA,uBAAIF,KACJ,oCACA,uBAAIG,WAGR,UAACzB,EAAD,YACE,mDACA,2BACE,yBACE,SAAC,KAAD,CAAMmB,MAAO,CAAEF,KAAAA,GAAQiB,GAAE,kBAAazB,EAAb,SAAzB,qBAIF,yBACE,SAAC,KAAD,CAAMU,MAAO,CAAEF,KAAAA,GAAQiB,GAAE,kBAAazB,EAAb,YAAzB,8BAMN,SAAC,KAAD,SAKT,C,mMC3FK0B,E,MAAWC,GAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QALY,sCAST,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,sGACkBL,EAASM,IAAI,uBAD/B,uBACGC,EADH,EACGA,KADH,kBAGEA,GAHF,kEAMA,SAAe7B,EAAtB,+CAAO,OAAP,oBAAO,WAA+B8B,GAA/B,yFACkBR,EAASM,IAAT,iBAAuBE,IADzC,uBACGD,EADH,EACGA,KADH,kBAGEA,GAHF,kEAMA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA+BD,GAA/B,yFACkBR,EAASM,IAAT,iBAAuBE,EAAvB,aADlB,uBACGD,EADH,EACGA,KADH,kBAGEA,GAHF,kEAMA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAyBC,GAAzB,yFACkBX,EAASM,IAAI,gBAAiB,CACnDH,OAAQ,CAAES,MAAOD,KAFd,uBACGJ,EADH,EACGA,KADH,kBAKEA,GALF,kEAQA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA+BL,GAA/B,yFACkBR,EAASM,IAAT,iBAAuBE,EAAvB,aADlB,uBACGD,EADH,EACGA,KADH,kBAGEA,GAHF,kE","sources":["components/MovieDetails/MovieDetails.styled.js","components/MovieDetails/MovieDetails.jsx","services/Api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  max-width: 1140px;\n  padding: 0 16px;\n`;\n\nexport const MovieCard = styled.div`\n  display: flex;\n  gap: 24px;\n  padding: 16px 16px;\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 6px -1px,\n    rgba(0, 0, 0, 0.06) 0px 2px 4px -1px;\n`;\n\nexport const MoviePoster = styled.img`\n  max-width: 240px;\n  display: block;\n`;\n\nexport const AddInfo = styled.div`\n  padding: 16px 16px;\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 6px -1px,\n    rgba(0, 0, 0, 0.06) 0px 2px 4px -1px;\n`;\n\nexport const ButtonStyled = styled.button`\n  margin: 16px 16px 0 16px;\n`;\n","import { useState, useEffect } from 'react';\nimport {\n  useParams,\n  Link,\n  Outlet,\n  useNavigate,\n  useLocation,\n} from 'react-router-dom';\n\nimport { getSingleMovies } from '../../services/Api';\n\nimport {\n  MovieCard,\n  MoviePoster,\n  AddInfo,\n  ButtonStyled,\n} from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const [singleMovie, setSingleMovie] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        setLoading(true);\n\n        const results = await getSingleMovies(movieId);\n        setSingleMovie(results);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchMovie();\n  }, [movieId]);\n\n  const navigate = useNavigate();\n  const location = useLocation();\n  const from = location.state?.from;\n  const goBack = () => navigate(from);\n\n  const { poster_path, title, overview, genres, vote_average } = singleMovie;\n\n  const genresList = genres?.map(item => item.name).join(' ');\n\n  return (\n    <>\n      <ButtonStyled onClick={goBack}>Go Back</ButtonStyled>\n      {loading && <p>...Loading</p>}\n\n      {error ? (\n        <p>...Movies load failed</p>\n      ) : (\n        <>\n          <MovieCard>\n            {poster_path && (\n              <MoviePoster\n                src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n              />\n            )}\n            <div>\n              <h2>{title}</h2>\n              <p>User Score: {Math.round(vote_average * 10)}%</p>\n              <h4>Overview</h4>\n              <p>{overview}</p>\n              <h4>Genres</h4>\n              <p>{genresList}</p>\n            </div>\n          </MovieCard>\n          <AddInfo>\n            <p>Additional information</p>\n            <ul>\n              <li>\n                <Link state={{ from }} to={`/movies/${movieId}/cast`}>\n                  Cast\n                </Link>\n              </li>\n              <li>\n                <Link state={{ from }} to={`/movies/${movieId}/reviews`}>\n                  Reviews\n                </Link>\n              </li>\n            </ul>\n          </AddInfo>\n          <Outlet />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst KEY_API = 'a4fc55630f18a734e904fff92448a44f';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: KEY_API,\n  },\n});\n\nexport async function getTrendingMovies() {\n  const { data } = await instance.get('/trending/movie/day');\n\n  return data;\n}\n\nexport async function getSingleMovies(id) {\n  const { data } = await instance.get(`/movie/${id}`);\n\n  return data;\n}\n\nexport async function getMovieCredits(id) {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n\n  return data;\n}\n\nexport async function getMovies(searchQuery) {\n  const { data } = await instance.get('/search/movie', {\n    params: { query: searchQuery },\n  });\n\n  return data;\n}\n\nexport async function getMovieReviews(id) {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n\n  return data;\n}\n"],"names":["MovieCard","styled","MoviePoster","AddInfo","ButtonStyled","useState","singleMovie","setSingleMovie","loading","setLoading","error","setError","movieId","useParams","useEffect","fetchMovie","getSingleMovies","results","navigate","useNavigate","from","useLocation","state","poster_path","title","overview","genres","vote_average","genresList","map","item","name","join","onClick","src","Math","round","to","instance","axios","baseURL","params","api_key","getTrendingMovies","get","data","id","getMovieCredits","getMovies","searchQuery","query","getMovieReviews"],"sourceRoot":""}