{"version":3,"file":"static/js/387.0406bd6d.chunk.js","mappings":"qRAEaA,EAAWC,EAAAA,GAAAA,GAAH,mEAKRC,EAAYD,EAAAA,GAAAA,IAAH,gEAKTE,EAAWF,EAAAA,GAAAA,GAAH,gD,SC0CrB,EA/Ca,WACX,OAA8BG,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,sGAEjBN,GAAW,GAFM,UAGMO,EAAAA,EAAAA,IAAgBJ,GAHtB,gBAGTK,EAHS,EAGTA,KACRV,EAAWU,GAJM,gDAMjBN,EAAS,EAAD,IANS,yBAQjBF,GAAW,GARM,4EAAH,qDAYlBM,GACD,GAAE,CAACH,IAEJ,IAAMM,EAAQ,OAAGZ,QAAH,IAAGA,OAAH,EAAGA,EAASa,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OAC5B,UAACnB,EAAD,WACGmB,GACC,SAACpB,EAAD,CACEqB,IAAG,yCAAoCD,GACvCE,IAAKJ,KAGP,SAAClB,EAAD,CAAWqB,IAAI,qEAEjB,uBAAIH,KACJ,uCAAeC,OAVFF,EADa,IAe9B,OACE,gCACGZ,IAAW,uCACXF,IAAW,SAACL,EAAD,UAAWiB,IACtBR,IAAS,mDAGf,C,mMChDKgB,E,MAAWC,GAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QALY,sCAST,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,sGACkBL,EAASM,IAAI,uBAD/B,uBACGC,EADH,EACGA,KADH,kBAGEA,GAHF,kEAMA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+Bd,GAA/B,yFACkBM,EAASM,IAAT,iBAAuBZ,IADzC,uBACGa,EADH,EACGA,KADH,kBAGEA,GAHF,kEAMA,SAAejB,EAAtB,+CAAO,OAAP,oBAAO,WAA+BI,GAA/B,yFACkBM,EAASM,IAAT,iBAAuBZ,EAAvB,aADlB,uBACGa,EADH,EACGA,KADH,kBAGEA,GAHF,kEAMA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAAyBC,GAAzB,yFACkBV,EAASM,IAAI,gBAAiB,CACnDH,OAAQ,CAAEQ,MAAOD,KAFd,uBACGH,EADH,EACGA,KADH,kBAKEA,GALF,kEAQA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA+BlB,GAA/B,yFACkBM,EAASM,IAAT,iBAAuBZ,EAAvB,aADlB,uBACGa,EADH,EACGA,KADH,kBAGEA,GAHF,kE","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/Api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  list-style: none;\n  padding-top: 16px;\n`;\n\nexport const CastImage = styled.img`\n  display: block;\n  max-width: 100px;\n`;\n\nexport const CastItem = styled.li`\n  margin-bottom: 16px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getMovieCredits } from '../../services/Api';\n\nimport { CastImage, CastList, CastItem } from './Cast.styled';\n\nconst Cast = () => {\n  const [credits, setCredits] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchCredits = async () => {\n      try {\n        setLoading(true);\n        const { cast } = await getMovieCredits(movieId);\n        setCredits(cast);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchCredits();\n  }, [movieId]);\n\n  const castList = credits?.map(({ id, name, character, profile_path }) => (\n    <CastItem key={id}>\n      {profile_path ? (\n        <CastImage\n          src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n          alt={name}\n        />\n      ) : (\n        <CastImage src=\"https://upload.wikimedia.org/wikipedia/commons/d/d6/Nophoto.jpg\" />\n      )}\n      <p>{name}</p>\n      <p>Character: {character}</p>\n    </CastItem>\n  ));\n\n  return (\n    <>\n      {loading && <p>... Loading</p>}\n      {credits && <CastList>{castList}</CastList>}\n      {error && <p>...Movies load failed</p>}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst KEY_API = 'a4fc55630f18a734e904fff92448a44f';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: KEY_API,\n  },\n});\n\nexport async function getTrendingMovies() {\n  const { data } = await instance.get('/trending/movie/day');\n\n  return data;\n}\n\nexport async function getSingleMovies(id) {\n  const { data } = await instance.get(`/movie/${id}`);\n\n  return data;\n}\n\nexport async function getMovieCredits(id) {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n\n  return data;\n}\n\nexport async function getMovies(searchQuery) {\n  const { data } = await instance.get('/search/movie', {\n    params: { query: searchQuery },\n  });\n\n  return data;\n}\n\nexport async function getMovieReviews(id) {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n\n  return data;\n}\n"],"names":["CastList","styled","CastImage","CastItem","useState","credits","setCredits","loading","setLoading","error","setError","movieId","useParams","useEffect","fetchCredits","getMovieCredits","cast","castList","map","id","name","character","profile_path","src","alt","instance","axios","baseURL","params","api_key","getTrendingMovies","get","data","getSingleMovies","getMovies","searchQuery","query","getMovieReviews"],"sourceRoot":""}